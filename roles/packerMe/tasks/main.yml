---
- name: Checking if variables.json exist
  stat:
    path: variables.json
  register: variables

- name: Load vars
  include_vars:
    file: variables.json
  when: variables.stat.exists

- name: Remove old manifest file (if exist)
  file:
    path: manifest.json
    state: absent
  
- name: Building AMI
  shell: "{{ lookup('file', 'files/call_packer.sh') }}"

- name: Extract ZONE:AMI_ID from manifest
  set_fact:
    ami_id: "{{ lookup('file', 'manifest.json') | from_json | json_query('builds[].artifact_id')}}"

- name: State new AMI ID
  debug:
    msg: "Created AMI: {{ ami_id[0].split(':')[1] }}"

- name: Setup terraform file
  replace:
    path: variables.json
    regexp: "{{ item.regexp }}"
    replace: "{{ item.replace }}"
  with_items:
    - { regexp: "    \"AMI_ID\".*", replace: "    \"AMI_ID\": \"{{ ami_id[0].split(':')[1] }}\"" }
    # - { regexp: "{{ ami_id[0].split(':')[0] }} = \"ami-.*\"", replace: "{{ ami_id[0].split(':')[0] }} = \"{{ ami_id[0].split(':')[1] }}\"" }

# TODO: Future use
# - name: Setup terraform file
#   replace:
#     path: roles/terraformDeploy/files/terraform.tfvars
#     regexp: "{{ item.regexp }}"
#     replace: "{{ item.replace }}"
#   with_items:
#     - { regexp: "{{ ami_id[0].split(':')[0] }} = \"ami-.*\"", replace: "{{ ami_id[0].split(':')[0] }} = \"{{ ami_id[0].split(':')[1] }}\"" }
#     - { regexp: "INSTANCE_SIZE = \".*\"", replace: "INSTANCE_SIZE = \"{{ AWS_INSTANCE_SIZE }}\"" }
#     - { regexp: "AWS_PROFILE = \".*\"", replace: "AWS_PROFILE = \"{{ AWS_PROFILE }}\"" }
#     - { regexp: "AWS_REGION = \".*\"", replace: "AWS_REGION = \"{{ AWS_REGION }}\"" }
#     - { regexp: "availability_zones   = \\[.*\\]\"", replace: "availability_zones   = \\[{{ AWS_AVAILABILITY_ZONES }}\\]\"" }